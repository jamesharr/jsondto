RPC Generator guts
   String data = "";
   String url;
   RequestBuilder.Method method;
   o.getHTTPMethod(JMethod)
   o.generateParameterPickleCode(JMethod)
     o.pickleParameter(JParameter)
   o.generateURL(JMethod)
   o.generateHeaders(JMethod)
   o.generateArgumentPickler(JMethod)
   o.generateResponseUnpickleCode(method)

PicklerGeneratorFactory
   [static].getInstance() -> PicklerGeneratorFactory
   .getGenerator(JType) -> PicklerGenerator

PicklerGenerator
   .getFactory() -> PicklerGeneratorFactory
   .getPickledType() -> JType
   .getPicklerClassName() -> String [class name]
     * int -> org.grickle.gwt.jrpc.client.BasicPicklers.IntPickler
       ...
     = org.grickle.Object[] -> org.grickle.PICKLER__Object_ARRAY_
     = java.util.TreeMap<String,Integer> -> java.util.PICKLER__TreeMap_1_String_0_Integer_2_
     = java.util.TreeSet<ArrayList<Foo>> -> java.util.PICKLER__TreeSet_1_ArrayList_1_Foo_2__2_
       ,  changes to _COMMA_
       <  changes to _LT_
       >  changes to _GT_
       .  changes to _DOT_
       [] changes to _ARRAY_
   .generate()     [generates class on disk, implemented by sub class]

PicklerGenerator implementations
   MapPicklerGenerator
   CollectionPicklerGenerator
   ArrayPickler
   ObjectPicklerGenerator
    PicklerGenerator.pickleField(JField)
    PicklerGenerator.unpickleField(JField)
  .generateJavaSourceCode()

GWT front ends:
 - JSONRPCPickler
 - JSON

// For test code
PicklerProxyGeneratorFactory
   [static].get(JType) -> string

PicklerProxyGenerator
   .getName() -> String
   .generate()

